{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Mappings": {
    "RegionMap": {
      "ap-northeast-1": {
        "AMI": "ami-d56c56bb"
      },
      "ap-southeast-1": {
        "AMI": "ami-22529d41"
      },
      "ap-southeast-2": {
        "AMI": "ami-8bdffbe8"
      },
      "eu-central-1": {
        "AMI": "ami-93f4ecff"
      },
      "eu-west-1": {
        "AMI": "ami-9f8f39ec"
      },
      "sa-east-1": {
        "AMI": "ami-fb129297"
      },
      "us-east-1": {
        "AMI": "ami-38c4eb52"
      },
      "us-west-1": {
        "AMI": "ami-cc2254ac"
      },
      "us-west-2": {
        "AMI": "ami-ddfc1abd"
      }
    }
  },
  "Outputs": {
    "APIServer": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Fn::GetAtt": [
                "APIServerLoadBalancer",
                "DNSName"
              ]
            },
            ":6443"
          ]
        ]
      }
    }
  },
  "Parameters": {
    "ClusterName": {
      "Default": "kubernetes",
      "Type": "String"
    },
    "FlannelNetwork": {
      "Default": "10.1.0.0/16",
      "Type": "String"
    },
    "FlannelSubnetLen": {
      "Default": "24",
      "Type": "Number"
    },
    "FlannelSubnetMax": {
      "Default": "10.1.24.0",
      "Type": "String"
    },
    "FlannelSubnetMin": {
      "Default": "10.1.0.0",
      "Type": "String"
    },
    "InstanceType": {
      "AllowedValues": [
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge"
      ],
      "Default": "m4.large",
      "Type": "String"
    },
    "KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "Password": {
      "Default": "admin",
      "Type": "String"
    },
    "Subnet": {
      "Type": "AWS::EC2::Subnet::Id"
    },
    "Username": {
      "Default": "admin",
      "Type": "String"
    },
    "VPC": {
      "Type": "AWS::EC2::VPC::Id"
    }
  },
  "Resources": {
    "APIServerLoadBalancer": {
      "Properties": {
        "HealthCheck": {
          "HealthyThreshold": "3",
          "Interval": "30",
          "Target": "TCP:6443",
          "Timeout": "5",
          "UnhealthyThreshold": "5"
        },
        "Listeners": [
          {
            "InstancePort": "8080",
            "LoadBalancerPort": "8080",
            "Protocol": "HTTP"
          },
          {
            "InstancePort": "6443",
            "LoadBalancerPort": "6443",
            "Protocol": "TCP"
          }
        ],
        "Scheme": "internal",
        "SecurityGroups": [
          {
            "Ref": "ServerSecurityGroup"
          }
        ],
        "Subnets": [
          {
            "Ref": "Subnet"
          }
        ]
      },
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "4f4b35c1-ab0a-45bd-b2e6-6770077f7a2a"
        }
      }
    },
    "AutoScalingGroup": {
      "Properties": {
        "DesiredCapacity": "1",
        "LaunchConfigurationName": {
          "Ref": "LaunchConfiguration"
        },
        "LoadBalancerNames": [
          {
            "Ref": "APIServerLoadBalancer"
          }
        ],
        "MaxSize": "3",
        "MinSize": "1",
        "Tags": [
          {
            "Key": "Name",
            "PropagateAtLaunch": true,
            "Value": "Kubernetes Master"
          }
        ],
        "VPCZoneIdentifier": [
          {
            "Ref": "Subnet"
          }
        ]
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MaxBatchSize": "1",
          "MinInstancesInService": "1"
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "91e2c010-9235-434e-962d-6bd7dd2c5e87"
        }
      }
    },
    "InstanceProfile": {
      "Properties": {
        "Roles": [
          {
            "Ref": "Role"
          }
        ]
      },
      "Type": "AWS::IAM::InstanceProfile",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "0cf50537-267c-4838-9279-eec039ed2529"
        }
      }
    },
    "LaunchConfiguration": {
      "Properties": {
        "IamInstanceProfile": {
          "Ref": "InstanceProfile"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMap",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "SecurityGroups": [
          {
            "Ref": "SecurityGroup"
          },
          {
            "Ref": "ServerSecurityGroup"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#cloud-config\n\n",
                "coreos:\n",
                "  etcd2:\n",
                "    advertise-client-urls: http://$private_ipv4:2379\n",
                "    initial-advertise-peer-urls: http://$private_ipv4:2380\n",
                "    listen-client-urls: http://0.0.0.0:2379\n",
                "    listen-peer-urls: http://$private_ipv4:2380\n",
                "  units:\n",
                "    - name: etcd-peers.service\n",
                "      command: start\n",
                "      content: |\n",
                "        [Unit]\n",
                "        Description=Write a file with the etcd peers that we should bootstrap to\n",
                "        After=docker.service\n        Requires=docker.service\n\n",
                "        [Service]\n",
                "        Type=oneshot\n",
                "        RemainAfterExit=yes\n",
                "        ExecStart=/usr/bin/docker pull monsantoco/etcd-aws-cluster:latest\n",
                "        ExecStart=/usr/bin/docker run --rm=true -v /etc/sysconfig/:/etc/sysconfig/ ",
                "monsantoco/etcd-aws-cluster:latest\n",
                "    - name: etcd2.service\n      command: start\n",
                "      drop-ins:\n        - name: 30-etcd_peers.conf\n",
                "          content: |\n",
                "            [Unit]\n",
                "            After=etcd-peers.service\n            Requires=etcd-peers.service\n\n",
                "            [Service]\n",
                "            # Load the other hosts in the etcd leader autoscaling group from file\n",
                "            EnvironmentFile=/etc/sysconfig/etcd-peers\n",
                "    - name: fleet.service\n",
                "      command: start\n",
                "    - name: flanneld.service\n",
                "      drop-ins:\n",
                "        - name: 50-network-config.conf\n",
                "          content: |\n",
                "            [Service]\n",
                "            ExecStartPre=/usr/bin/etcdctl set /coreos.com/network/config '{ \"Network\": \"",
                {
                  "Ref": "FlannelNetwork"
                },
                "\", \"SubnetLen\": ",
                {
                  "Ref": "FlannelSubnetLen"
                },
                ", \"SubnetMin\": \"",
                {
                  "Ref": "FlannelSubnetMin"
                },
                "\", \"SubnetMax\": \"",
                {
                  "Ref": "FlannelSubnetMax"
                },
                "\" }'\n",
                "      command: start\n",
                "    - name: kubelet.service\n",
                "      command: start\n",
                "      drop-ins:\n",
                "        - name: local.conf\n",
                "          content: |\n",
                "            [Service]\n",
                "            ExecStart=\n",
                "            ExecStart=/usr/bin/kubelet \\\n",
                "              --api-servers=http://127.0.0.1:8080 \\\n",
                "              --register-node=true \\\n",
                "              --allow-privileged=true \\\n",
                "              --config=/etc/kubernetes/manifests\n",
                "    - name: kube-system.service\n",
                "      command: start\n",
                "      content: |\n",
                "        [Unit]\n",
                "        After=kubelet.service\n",
                "        Requires=kubelet.service\n\n",
                "        [Service]\n",
                "        Type=oneshot\n",
                "        ExecStart=/bin/sh -c 'while true; do curl -XPOST ",
                "-d\\'{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"name\":\"kube-system\"}}\\' -sS ",
                "\"http://127.0.0.1:8080/api/v1/namespaces\" && break || sleep 20; done'\n",
                "write_files:\n",
                "  - path: /etc/kubernetes/manifests/kube-apiserver.yaml\n",
                "    content: |\n",
                "      apiVersion: v1\n",
                "      kind: Pod\n",
                "      metadata:\n",
                "        name: kube-apiserver\n",
                "        namespace: kube-system\n",
                "      spec:\n",
                "        hostNetwork: true\n",
                "        containers:\n",
                "        - name: kube-apiserver\n",
                "          image: gcr.io/google_containers/hyperkube:v1.1.2\n",
                "          command:\n",
                "          - /hyperkube\n",
                "          - apiserver\n",
                "          - --etcd-servers=http://127.0.0.1:2379\n",
                "          - --allow-privileged=true\n",
                "          - --service-cluster-ip-range=10.3.0.0/24\n",
                "          - --admission-control=NamespaceLifecycle,LimitRanger,SecurityContextDeny,",
                "ResourceQuota\n",
                "          - --runtime-config=extensions/v1beta1/deployments=true,",
                "extensions/v1beta1/daemonsets=true\n",
                "          - --cloud-provider=aws\n",
                "          - --external-hostname=",
                {
                  "Fn::GetAtt": [
                    "APIServerLoadBalancer",
                    "DNSName"
                  ]
                },
                "\n",
                "          - --basic-auth-file=/srv/kubernetes/basic_auth.csv\n",
                "          ports:\n",
                "          - containerPort: 443\n",
                "            hostPort: 443\n",
                "            name: https\n",
                "          - containerPort: 8080\n",
                "            hostPort: 8080\n",
                "            name: local\n",
                "          volumeMounts:\n",
                "          - mountPath: /etc/ssl/certs\n",
                "            name: ssl-certs-host\n",
                "            readOnly: true\n",
                "          - mountPath: /srv/kubernetes/basic_auth.csv\n",
                "            name: basic-auth-file\n",
                "            readOnly: true\n",
                "        volumes:\n",
                "        - hostPath:\n",
                "            path: /usr/share/ca-certificates\n",
                "          name: ssl-certs-host\n",
                "        - hostPath:\n",
                "            path: /srv/kubernetes/basic_auth.csv\n",
                "          name: basic-auth-file\n",
                "  - path: /etc/kubernetes/manifests/kube-proxy.yaml\n",
                "    content: |\n",
                "      apiVersion: v1\n",
                "      kind: Pod\n",
                "      metadata:\n",
                "        name: kube-proxy\n",
                "        namespace: kube-system\n",
                "      spec:\n",
                "        hostNetwork: true\n",
                "        containers:\n",
                "        - name: kube-proxy\n",
                "          image: gcr.io/google_containers/hyperkube:v1.1.2\n",
                "          command:\n",
                "          - /hyperkube\n",
                "          - proxy\n",
                "          - --master=http://127.0.0.1:8080\n",
                "          - --proxy-mode=iptables\n",
                "          securityContext:\n",
                "            privileged: true\n",
                "          volumeMounts:\n",
                "          - mountPath: /etc/ssl/certs\n",
                "            name: ssl-certs-host\n",
                "            readOnly: true\n",
                "        volumes:\n",
                "        - hostPath:\n",
                "            path: /usr/share/ca-certificates\n",
                "          name: ssl-certs-host\n",
                "  - path: /etc/kubernetes/manifests/kube-podmaster.yaml\n",
                "    content: |\n",
                "      apiVersion: v1\n",
                "      kind: Pod\n",
                "      metadata:\n",
                "        name: kube-podmaster\n",
                "        namespace: kube-system\n",
                "      spec:\n",
                "        hostNetwork: true\n",
                "        containers:\n",
                "        - name: scheduler-elector\n",
                "          image: gcr.io/google_containers/podmaster:1.1\n",
                "          command:\n",
                "          - /podmaster\n",
                "          - --etcd-servers=http://127.0.0.1:2379\n",
                "          - --key=scheduler\n",
                "          - --whoami=$private_ipv4\n",
                "          - --source-file=/src/manifests/kube-scheduler.yaml\n",
                "          - --dest-file=/dst/manifests/kube-scheduler.yaml\n",
                "          volumeMounts:\n",
                "          - mountPath: /src/manifests\n",
                "            name: manifest-src\n",
                "            readOnly: true\n",
                "          - mountPath: /dst/manifests\n",
                "            name: manifest-dst\n",
                "        - name: controller-manager-elector\n",
                "          image: gcr.io/google_containers/podmaster:1.1\n",
                "          command:\n",
                "          - /podmaster\n",
                "          - --etcd-servers=http://127.0.0.1:2379\n",
                "          - --key=controller\n",
                "          - --whoami=$private_ipv4\n",
                "          - --source-file=/src/manifests/kube-controller-manager.yaml\n",
                "          - --dest-file=/dst/manifests/kube-controller-manager.yaml\n",
                "          terminationMessagePath: /dev/termination-log\n",
                "          volumeMounts:\n",
                "          - mountPath: /src/manifests\n",
                "            name: manifest-src\n",
                "            readOnly: true\n",
                "          - mountPath: /dst/manifests\n",
                "            name: manifest-dst\n",
                "        volumes:\n",
                "        - hostPath:\n",
                "            path: /srv/kubernetes/manifests\n",
                "          name: manifest-src\n",
                "        - hostPath:\n",
                "            path: /etc/kubernetes/manifests\n",
                "          name: manifest-dst\n",
                "  - path: /srv/kubernetes/manifests/kube-controller-manager.yaml\n",
                "    content: |\n",
                "      apiVersion: v1\n",
                "      kind: Pod\n",
                "      metadata:\n",
                "        name: kube-controller-manager\n",
                "        namespace: kube-system\n",
                "      spec:\n",
                "        hostNetwork: true\n",
                "        containers:\n",
                "        - name: kube-controller-manager\n",
                "          image: gcr.io/google_containers/hyperkube:v1.1.2\n",
                "          command:\n",
                "          - /hyperkube\n",
                "          - controller-manager\n",
                "          - --master=http://127.0.0.1:8080\n",
                "          - --cloud-provider=aws\n",
                "          livenessProbe:\n",
                "            httpGet:\n",
                "              host: 127.0.0.1\n",
                "              path: /healthz\n",
                "              port: 10252\n",
                "            initialDelaySeconds: 15\n",
                "            timeoutSeconds: 1\n",
                "          volumeMounts:\n",
                "          - mountPath: /etc/ssl/certs\n",
                "            name: ssl-certs-host\n",
                "            readOnly: true\n",
                "        volumes:\n",
                "        - hostPath:\n",
                "            path: /usr/share/ca-certificates\n",
                "          name: ssl-certs-host\n",
                "  - path: /srv/kubernetes/manifests/kube-scheduler.yaml\n",
                "    content: |\n",
                "      apiVersion: v1\n",
                "      kind: Pod\n",
                "      metadata:\n",
                "        name: kube-scheduler\n",
                "        namespace: kube-system\n",
                "      spec:\n",
                "        hostNetwork: true\n",
                "        containers:\n",
                "        - name: kube-scheduler\n",
                "          image: gcr.io/google_containers/hyperkube:v1.1.2\n",
                "          command:\n",
                "          - /hyperkube\n",
                "          - scheduler\n",
                "          - --master=http://127.0.0.1:8080\n",
                "          livenessProbe:\n",
                "            httpGet:\n",
                "              host: 127.0.0.1\n",
                "              path: /healthz\n",
                "              port: 10251\n",
                "            initialDelaySeconds: 15\n",
                "            timeoutSeconds: 1\n",
                "  - path: /srv/kubernetes/manifests/kube-system.yaml\n",
                "    content: |\n",
                "      apiVersion: v1\n",
                "      kind: Namespace\n",
                "      metadata:\n",
                "        name: kube-system\n",
                "  - path: /srv/kubernetes/basic_auth.csv\n",
                "    content: |\n",
                "      ",
                {
                  "Ref": "Password"
                },
                ",",
                {
                  "Ref": "Username"
                },
                ",admin\n"
              ]
            ]
          }
        }
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "fcb2bf3c-bd8b-4549-8af4-93b0532d3745"
        }
      }
    },
    "Policy": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ec2:Describe*"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            },
            {
              "Action": [
                "autoscaling:Describe*"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            }
          ]
        },
        "PolicyName": "coreos",
        "Roles": [
          {
            "Ref": "Role"
          }
        ]
      },
      "Type": "AWS::IAM::Policy",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "bb5b9fcd-1e09-4ac5-8752-bdd2865ad88c"
        }
      }
    },
    "Role": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              }
            }
          ]
        }
      },
      "Type": "AWS::IAM::Role",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "54f746b1-862f-479d-afdf-577c1e0eecb5"
        }
      }
    },
    "SecurityGroup": {
      "Properties": {
        "GroupDescription": "Kubernetes Security Group",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "-1",
            "IpProtocol": "-1",
            "ToPort": "-1"
          }
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "22",
            "IpProtocol": "tcp",
            "ToPort": "22"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "30000",
            "IpProtocol": "tcp",
            "ToPort": "32767"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "e0af4968-9914-434f-9900-d93b0787c46c"
        }
      }
    },
    "ServerSecurityGroup": {
      "Properties": {
        "GroupDescription": "Kubernetes API Server Security Group",
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "6443",
            "IpProtocol": "tcp",
            "ToPort": "6443"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "ec78224c-a2b7-42fe-9463-539a23299c22"
        }
      }
    },
    "etcdClientCommunicationSecurityGroupIngress": {
      "Properties": {
        "FromPort": "2379",
        "GroupId": {
          "Ref": "SecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroup"
        },
        "ToPort": "2379"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "etcdServerToServerCommunicationSecurityGroupIngress": {
      "Properties": {
        "FromPort": "2380",
        "GroupId": {
          "Ref": "SecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroup"
        },
        "ToPort": "2380"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "flannelVXLANSecurityGroupIngress": {
      "Properties": {
        "FromPort": "8472",
        "GroupId": {
          "Ref": "SecurityGroup"
        },
        "IpProtocol": "udp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroup"
        },
        "ToPort": "8472"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Designer": {
      "ec78224c-a2b7-42fe-9463-539a23299c22": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 60,
          "y": 90
        },
        "z": 1,
        "embeds": []
      },
      "e0af4968-9914-434f-9900-d93b0787c46c": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 180,
          "y": 90
        },
        "z": 1,
        "embeds": []
      },
      "54f746b1-862f-479d-afdf-577c1e0eecb5": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 60,
          "y": 210
        },
        "z": 1,
        "embeds": []
      },
      "bb5b9fcd-1e09-4ac5-8752-bdd2865ad88c": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 180,
          "y": 210
        },
        "z": 1,
        "embeds": [],
        "isassociatedwith": [
          "54f746b1-862f-479d-afdf-577c1e0eecb5"
        ]
      },
      "0cf50537-267c-4838-9279-eec039ed2529": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 300,
          "y": 90
        },
        "z": 1,
        "embeds": [],
        "isassociatedwith": [
          "54f746b1-862f-479d-afdf-577c1e0eecb5"
        ]
      },
      "4f4b35c1-ab0a-45bd-b2e6-6770077f7a2a": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 300,
          "y": 210
        },
        "z": 1,
        "embeds": [],
        "ismemberof": [
          "ec78224c-a2b7-42fe-9463-539a23299c22"
        ]
      },
      "fcb2bf3c-bd8b-4549-8af4-93b0532d3745": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 60,
          "y": 330
        },
        "z": 1,
        "embeds": [],
        "ismemberof": [
          "e0af4968-9914-434f-9900-d93b0787c46c",
          "ec78224c-a2b7-42fe-9463-539a23299c22"
        ],
        "isrelatedto": [
          "0cf50537-267c-4838-9279-eec039ed2529",
          "4f4b35c1-ab0a-45bd-b2e6-6770077f7a2a"
        ]
      },
      "91e2c010-9235-434e-962d-6bd7dd2c5e87": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 180,
          "y": 330
        },
        "z": 1,
        "embeds": [],
        "isconnectedto": [
          "4f4b35c1-ab0a-45bd-b2e6-6770077f7a2a"
        ],
        "isassociatedwith": [
          "fcb2bf3c-bd8b-4549-8af4-93b0532d3745"
        ]
      }
    }
  }
}
